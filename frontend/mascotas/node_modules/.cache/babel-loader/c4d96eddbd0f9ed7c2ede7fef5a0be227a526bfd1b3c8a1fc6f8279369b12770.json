{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { useUserStore } from '@/store/userApi.js';\nimport { ref } from \"vue\";\nimport { storeToRefs } from 'pinia';\nexport default {\n  __name: 'UserFormView',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const useUserApi = useUserStore();\n    let {\n      addUser\n    } = useUserApi;\n    let nombre = ref(undefined);\n    let apellido = ref(undefined);\n    let email = ref(undefined);\n    let tel = ref(undefined);\n    const saveUser = () => {\n      console.log(nombre.value + \" \" + apellido.value, email.value, tel.value);\n      if (nombre.value === undefined || apellido.value === undefined || email.value === undefined || tel.value === undefined) {\n        Swal.fire('Campos incompletos', 'Debes llenar todos los campos ', 'warning');\n      } else {\n        //\n        Swal.fire({\n          title: '¿Está seguro?',\n          text: \"Revisa y confirma que los campos estén cons los datos correctos\",\n          icon: 'question',\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n          confirmButtonText: 'Si, estoy seguro'\n        }).then(result => {\n          if (result.isConfirmed) {\n            addUser(nombre.value + \" \" + apellido.value, email.value, tel.value);\n            clear();\n          }\n        });\n\n        //\n      }\n    };\n\n    const clear = () => {\n      nombre.value = undefined;\n      apellido.value = undefined;\n      email.value = undefined;\n      tel.value = undefined;\n    };\n    const __returned__ = {\n      useUserApi,\n      get addUser() {\n        return addUser;\n      },\n      set addUser(v) {\n        addUser = v;\n      },\n      get nombre() {\n        return nombre;\n      },\n      set nombre(v) {\n        nombre = v;\n      },\n      get apellido() {\n        return apellido;\n      },\n      set apellido(v) {\n        apellido = v;\n      },\n      get email() {\n        return email;\n      },\n      set email(v) {\n        email = v;\n      },\n      get tel() {\n        return tel;\n      },\n      set tel(v) {\n        tel = v;\n      },\n      saveUser,\n      clear,\n      get Swal() {\n        return Swal;\n      },\n      get useUserStore() {\n        return useUserStore;\n      },\n      ref,\n      get storeToRefs() {\n        return storeToRefs;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["Swal","useUserStore","ref","storeToRefs","useUserApi","addUser","nombre","undefined","apellido","email","tel","saveUser","console","log","value","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","clear"],"sources":["C:/Users/Andersson/Desktop/semillero/mascotas2/frontend/mascotas/src/views/UserFormView.vue"],"sourcesContent":["<template>\r\n    <div class=\"row d-flex justify-content-center vh-100\" style=\"\">\r\n      <div class=\"col-xl-7 col-lg-8 col-md-9 col-11 text-center\">\r\n          \r\n          <div class=\"card\">\r\n                <h5 class=\"text-center mb-4\">Datos de Usuario</h5>\r\n                <div class=\"form-card\">\r\n                    <div class=\"row justify-content-between text-left\">\r\n                        \r\n                    </div>\r\n                    <div class=\"row justify-content-between text-start\">\r\n                        <div class=\"form-group col-sm-6 flex-column d-flex\"> \r\n                            <label class=\"form-control-label px-3\">Nombres: </label> \r\n                            <input type=\"text\" v-model=\"nombre\" ref=\"anyName\" > \r\n                        </div>\r\n                        <div class=\"form-group col-sm-6 flex-column d-flex\"> \r\n                            <label class=\"form-control-label px-3\">Apellidos: </label> \r\n                            <input type=\"text\" v-model=\"apellido\" > \r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row justify-content-between text-start\"> \r\n                        <div class=\"form-group col-sm-12 flex-column d-flex\"> \r\n                            <label class=\"form-control-label px-3\">Correo:</label> \r\n                            <input type=\"email\" v-model=\"email\">  \r\n                        </div>\r\n                            \r\n                     </div>\r\n\r\n                     <div class=\"row justify-content-between text-start\"> \r\n                        <div class=\"form-group col-sm-12 flex-column d-flex\"> \r\n                            <label class=\"form-control-label px-3\">Telefono:</label> \r\n                            <input type=\"number\" v-model=\"tel\" id=\"tel\"> \r\n                        </div>\r\n                     </div>\r\n                    \r\n                    <div class=\"row justify-content-end\">\r\n                        <div class=\"form-group col-sm-3\"> \r\n                            <button  class=\"btn-block btn-primary\" @click=\"saveUser()\">\r\n                                Guardar\r\n                            </button> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> \r\n    </div>\r\n  \r\n</template>\r\n\r\n<script setup>  \r\n    import Swal from 'sweetalert2'\r\n    import {useUserStore } from '@/store/userApi.js'\r\n    import { ref } from \"vue\";\r\n    import { storeToRefs } from 'pinia';\r\n\r\n    const useUserApi = useUserStore()\r\n    let {addUser} = useUserApi\r\n \r\n    let nombre =ref(undefined)\r\n    let apellido = ref(undefined)\r\n    let email = ref(undefined)\r\n    let tel = ref(undefined)\r\n\r\n    const saveUser = () =>{\r\n        console.log(nombre.value+\" \"+apellido.value, email.value, tel.value) \r\n        if(nombre.value === undefined   ||  apellido.value  === undefined || email.value  === undefined || tel.value  === undefined ){\r\n            Swal.fire(\r\n            'Campos incompletos',\r\n            'Debes llenar todos los campos ',\r\n            'warning'\r\n            ) \r\n        }else{\r\n            //\r\n            Swal.fire({\r\n                title: '¿Está seguro?',\r\n                text: \"Revisa y confirma que los campos estén cons los datos correctos\",\r\n                icon: 'question',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Si, estoy seguro'\r\n                }).then((result) => {\r\n                if (result.isConfirmed) { \r\n                   addUser(nombre.value+\" \"+apellido.value, email.value, tel.value)\r\n                    clear() \r\n                }\r\n            })\r\n\r\n            //\r\n        }\r\n    }\r\n\r\n    const clear = () =>{   \r\n        nombre.value = undefined\r\n        apellido.value  = undefined\r\n        email.value  = undefined\r\n        tel.value  = undefined\r\n    }\r\n\r\n    \r\n</script>\r\n\r\n<style scoped>\r\nbody{\r\n    color: #000;\r\n    overflow-x: hidden;\r\n    height: 100%; \r\n    background-repeat: no-repeat;\r\n    background-size: 100% 100%;\r\n}\r\n.card{\r\n    padding: 30px 40px;\r\n    margin-top: 60px;\r\n    margin-bottom: 60px;\r\n    border: none !important;\r\n    box-shadow: 0 6px 12px 0 rgba(0,0,0,0.2)\r\n}\r\n\r\n.blue-text{\r\n    color: #00BCD4\r\n}\r\n\r\n.form-control-label{\r\n    margin-bottom: 0\r\n}\r\n\r\ninput, textarea, button{\r\n    padding: 8px 15px;\r\n    border-radius: 5px !important;\r\n    margin: 5px 0px;\r\n    box-sizing: border-box;\r\n    border: 1px solid #ccc;\r\n    font-size: 18px !important;\r\n    font-weight: 300\r\n}\r\n\r\ninput:focus, textarea:focus{\r\n    -moz-box-shadow: none !important;\r\n    -webkit-box-shadow: none !important;\r\n    box-shadow: none !important;\r\n    border: 1px solid #00BCD4;\r\n    outline-width: 0;\r\n    font-weight: 400\r\n}\r\n\r\ninput[type=number]::-webkit-inner-spin-button,\r\ninput[type=number]::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n} \r\n\r\n</style>"],"mappings":"AAkDI,OAAOA,IAAI,MAAM,aAAa;AAC9B,SAAQC,YAAY,QAAQ,oBAAoB;AAChD,SAASC,GAAG,QAAQ,KAAK;AACzB,SAASC,WAAW,QAAQ,OAAO;;;;;;;IAEnC,MAAMC,UAAU,GAAGH,YAAY,EAAE;IACjC,IAAI;MAACI;IAAO,CAAC,GAAGD,UAAU;IAE1B,IAAIE,MAAM,GAAEJ,GAAG,CAACK,SAAS,CAAC;IAC1B,IAAIC,QAAQ,GAAGN,GAAG,CAACK,SAAS,CAAC;IAC7B,IAAIE,KAAK,GAAGP,GAAG,CAACK,SAAS,CAAC;IAC1B,IAAIG,GAAG,GAAGR,GAAG,CAACK,SAAS,CAAC;IAExB,MAAMI,QAAQ,GAAGA,CAAA,KAAK;MAClBC,OAAO,CAACC,GAAG,CAACP,MAAM,CAACQ,KAAK,GAAC,GAAG,GAACN,QAAQ,CAACM,KAAK,EAAEL,KAAK,CAACK,KAAK,EAAEJ,GAAG,CAACI,KAAK,CAAC;MACpE,IAAGR,MAAM,CAACQ,KAAK,KAAKP,SAAS,IAAOC,QAAQ,CAACM,KAAK,KAAMP,SAAS,IAAIE,KAAK,CAACK,KAAK,KAAMP,SAAS,IAAIG,GAAG,CAACI,KAAK,KAAMP,SAAS,EAAE;QACzHP,IAAI,CAACe,IAAI,CACT,oBAAoB,EACpB,gCAAgC,EAChC,SAAS,CACR;MACL,CAAC,MAAI;QACD;QACAf,IAAI,CAACe,IAAI,CAAC;UACNC,KAAK,EAAE,eAAe;UACtBC,IAAI,EAAE,iEAAiE;UACvEC,IAAI,EAAE,UAAU;UAChBC,gBAAgB,EAAE,IAAI;UACtBC,kBAAkB,EAAE,SAAS;UAC7BC,iBAAiB,EAAE,MAAM;UACzBC,iBAAiB,EAAE;QACnB,CAAC,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAK;UACpB,IAAIA,MAAM,CAACC,WAAW,EAAE;YACrBpB,OAAO,CAACC,MAAM,CAACQ,KAAK,GAAC,GAAG,GAACN,QAAQ,CAACM,KAAK,EAAEL,KAAK,CAACK,KAAK,EAAEJ,GAAG,CAACI,KAAK,CAAC;YAC/DY,KAAK,EAAE;UACX;QACJ,CAAC,CAAC;;QAEF;MACJ;IACJ,CAAC;;IAED,MAAMA,KAAK,GAAGA,CAAA,KAAK;MACfpB,MAAM,CAACQ,KAAK,GAAGP,SAAS;MACxBC,QAAQ,CAACM,KAAK,GAAIP,SAAS;MAC3BE,KAAK,CAACK,KAAK,GAAIP,SAAS;MACxBG,GAAG,CAACI,KAAK,GAAIP,SAAS;IAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}